(window.webpackJsonp=window.webpackJsonp||[]).push([[242],{906:function(_,v,t){"use strict";t.r(v);var a=t(21),l=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_01-mysql事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_01-mysql事务"}},[_._v("#")]),_._v(" 01.mysql事务")]),_._v(" "),t("h2",{attrs:{id:"_1-1-innodb事务原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-innodb事务原理"}},[_._v("#")]),_._v(" 1.1 InnoDB事务原理")]),_._v(" "),t("ul",[t("li",[_._v("事务（Transaction）是数据库区别于文件系统的重要特性之一，事务会把数据库从一种一致性状态转换为另一种一致性状态。")]),_._v(" "),t("li",[_._v("在数据库提交时，可以确保要么所有修改都已保存，要么所有修改都不保存。")])]),_._v(" "),t("h2",{attrs:{id:"_1-2-事务四大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-事务四大特性"}},[_._v("#")]),_._v(" 1.2 事务四大特性")]),_._v(" "),t("ul",[t("li",[_._v("原子性：整个事物的所有操作要么全部提交成功，要么全部失败回滚("),t("code",[_._v("要么全部执行，要么全部回滚")]),_._v(")。")]),_._v(" "),t("li",[_._v("一致性：几个并行执行的事务，其执行结果必须与按某一顺序串行执行的结果相一致（"),t("code",[_._v("几个并行事务执行结果相同")]),_._v("）。")]),_._v(" "),t("li",[_._v("隔离性：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。")]),_._v(" "),t("li",[_._v("持久性:  一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")])]),_._v(" "),t("blockquote",[t("p",[t("code",[_._v("原子性和一致性区别")])])]),_._v(" "),t("ul",[t("li",[_._v("原子性并不能保证一致性，在多事务并行情况下，即使保证每个事物原子性，仍然可能数据不一致")]),_._v(" "),t("li",[_._v("比如：假如同时开启两个事物A和B都要给tom账号转100元，可能增加两次，但是有一次被另一个事物覆盖")])]),_._v(" "),t("h2",{attrs:{id:"_1-3-innodb与myisam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-innodb与myisam"}},[_._v("#")]),_._v(" 1.3 InnoDB与MyISAM")]),_._v(" "),t("ul",[t("li",[t("strong",[t("code",[_._v("MyISAM不支持事物回滚，InnoDB是支持事物")])])]),_._v(" "),t("li",[t("strong",[_._v("MyISAM")]),_._v("和MEMORY存储引擎采用的是"),t("strong",[_._v("表级锁")]),_._v("（table-level locking）。")]),_._v(" "),t("li",[t("strong",[_._v("InnoDB")]),_._v("存储引擎既支持"),t("strong",[_._v("行级锁")]),_._v("（row-level locking），也支持"),t("strong",[_._v("表级锁")]),_._v("，但默认情况下是采用行级锁。\n"),t("ul",[t("li",[_._v("MyISAM更适合查询多的情况")]),_._v(" "),t("li",[_._v("InnoDB更适合写入多的")])])])]),_._v(" "),t("h2",{attrs:{id:"_1-4-事务隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-事务隔离级别"}},[_._v("#")]),_._v(" 1.4 事务隔离级别")]),_._v(" "),t("h3",{attrs:{id:"_1-4-1-未提交读-脏读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-未提交读-脏读"}},[_._v("#")]),_._v(" 1.4.1 未提交读: 脏读")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("读取到其他事务修改但未提交数据")])])]),_._v(" "),t("li",[t("p",[_._v("1）事务2查询到的数据是事务1中修改但未提交的数据，但因为事务1回滚了数据")])]),_._v(" "),t("li",[t("p",[_._v("2）所以事务2查询的数据是不正确的，因此出现了脏读的问题。")])])]),_._v(" "),t("h3",{attrs:{id:"_1-4-2-提交读-不可重复读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-提交读-不可重复读"}},[_._v("#")]),_._v(" 1.4.2 提交读: 不可重复读")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("事务1读取到事务2修改前和修改后的数据，两次读取数据不一样")])])]),_._v(" "),t("li",[t("p",[_._v("**注：**一个事务从开始到提交之前对数据所做的改变对其它事务是不可见的，这样就解决在READ-UNCOMMITTED级别下的脏读问题。")])]),_._v(" "),t("li",[t("p",[_._v("1）事务2执行update语句但未提交前，事务1的前两个select操作返回结果是相同的。")])]),_._v(" "),t("li",[t("p",[_._v("2）但事务2执行commit操作后，事务1的第三个select操作就读取到事务2对数据的改变。")])]),_._v(" "),t("li",[t("p",[_._v("3）导致与前两次select操作返回不同的数据，因此出现了不可重复读的问题。")])])]),_._v(" "),t("h3",{attrs:{id:"_1-4-3-可重复读-幻读-mysql默认"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-可重复读-幻读-mysql默认"}},[_._v("#")]),_._v(" 1.4.3 可重复读: 幻读(mysql默认)")]),_._v(" "),t("ul",[t("li",[t("p",[t("code",[_._v("事务1在自己版本号中，查询到另一个事务插入新的数据行，这就会导致该事物中凭空多出数据行")])])]),_._v(" "),t("li",[t("p",[t("code",[_._v("这是MySQL的默认事务隔离级别")])])]),_._v(" "),t("li",[t("p",[_._v("1）事务每开启一个实例，都会分配一个版本号给它，如果读取的数据行正在被其它事务执行DELETE或UPDATE操作（即该行上有排他锁）")])]),_._v(" "),t("li",[t("p",[_._v("2）这时该事物的读取操作不会等待行上的锁释放，而是根据版本号去读取行的快照数据（记录在undo log中）")])]),_._v(" "),t("li",[t("p",[_._v("3）这样，事务中的查询操作返回的都是同一版本下的数据，解决了不可重复读问题。")])]),_._v(" "),t("li",[t("p",[_._v("4）虽然该隔离级别下解决了不可重复读问题，但理论上会导致另一个问题：幻读（Phantom Read）。")])]),_._v(" "),t("li",[t("p",[_._v("5）一个事务在执行过程中，另一个事物对已有数据行的更改，MVCC机制可保障该事物读取到的原有数据行的内容相同")])]),_._v(" "),t("li",[t("p",[_._v("6）但并不能阻止另一个事务插入新的数据行，这就会导致该事物中凭空多出数据行，像出现了幻读一样，这便是幻读问题。")])])]),_._v(" "),t("h3",{attrs:{id:"_1-4-4-可串行读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-4-可串行读"}},[_._v("#")]),_._v(" 1.4.4 可串行读")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("1）这是事务的最高隔离级别，通过强制事务排序，使之不可能相互冲突，就是在每个读的数据行加上共享锁来实现。")])]),_._v(" "),t("li",[t("p",[_._v("2）在该隔离级别下，可以解决前面出现的脏读、不可重复读和幻读问题，但也会导致大量的超时和锁竞争现象，一般不推荐使用。")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);