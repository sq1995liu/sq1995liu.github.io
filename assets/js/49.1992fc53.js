(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{1093:function(_,v,l){"use strict";l.r(v);var i=l(21),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,i=_._self._c||v;return i("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[i("ul",[i("li",[_._v("秒杀系统部署")]),_._v(" "),i("li",[_._v("高并发项目整体架构部署（500万日活项目部署）")]),_._v(" "),i("li",[_._v("大体先梳理项目中的技术点（结合实验楼分析项目整体架构和技术点）")])]),_._v(" "),i("h1",{attrs:{id:"_01-秒杀系统架构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_01-秒杀系统架构"}},[_._v("#")]),_._v(" 01.秒杀系统架构")]),_._v(" "),i("h2",{attrs:{id:"_1-1-超卖问题"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-超卖问题"}},[_._v("#")]),_._v(" 1.1 超卖问题")]),_._v(" "),i("ul",[i("li",[_._v("1000件商品")]),_._v(" "),i("li",[_._v("第一步查询商品数量")]),_._v(" "),i("li",[_._v("查询商品：A 读 商品 1000 B 读 商品 1000")]),_._v(" "),i("li",[_._v("扣减库存：A : 1000-1 =999写入数据库，B：1000-1=999")]),_._v(" "),i("li",[_._v("卖了两件商品，商品数量：999")])]),_._v(" "),i("h2",{attrs:{id:"_1-2-乐观锁和悲观锁如何解决超卖问题的"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-乐观锁和悲观锁如何解决超卖问题的"}},[_._v("#")]),_._v(" 1.2 乐观锁和悲观锁如何解决超卖问题的")]),_._v(" "),i("ul",[i("li",[_._v("悲观锁解决的原理\n"),i("ul",[i("li",[_._v("A读商品数量是1000,如果要是悲观锁，A读完数量后商品就加锁（"),i("code",[_._v("排它锁")]),_._v("）了")]),_._v(" "),i("li",[_._v("B过来商品数量，A加的锁还没有释放，所以B要等待")]),_._v(" "),i("li",[_._v("只有当A卖完商品，商品数量减一，把商品数量为 999重新写入到数据库才释放锁")]),_._v(" "),i("li",[_._v("B获得商品时商品数据量是999而不是1000")])])]),_._v(" "),i("li",[_._v("乐观锁解决的原理\n"),i("ul",[i("li",[_._v("A读商品数量是1000,如果要是乐观锁这一刻乐观锁没有加锁")]),_._v(" "),i("li",[_._v("A进行商品扣减的时候会校验，现在的商品数量是否和开始数量一致")]),_._v(" "),i("li",[_._v("A"),i("code",[_._v("扣减")]),_._v("（排它锁）之后要不999写入到mysql中时会校验商品数量是否是1000")]),_._v(" "),i("li",[_._v("和A刚开始读的数据一致就写入，不一致重试")])])])]),_._v(" "),i("h1",{attrs:{id:"_02-各层解决方案"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_02-各层解决方案"}},[_._v("#")]),_._v(" 02 各层解决方案")]),_._v(" "),i("h2",{attrs:{id:"_2-1-分层结构图说明"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-分层结构图说明"}},[_._v("#")]),_._v(" 2.1 分层结构图说明")]),_._v(" "),i("p",[i("img",{staticStyle:{width:"600px","margin-left":"50px"},attrs:{src:l(745)}})]),_._v(" "),i("h2",{attrs:{id:"_2-2-网络层-cdn"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-网络层-cdn"}},[_._v("#")]),_._v(" 2.2 网络层 CDN")]),_._v(" "),i("ul",[i("li",[i("code",[_._v("特点：")]),_._v("CDN服务器不需安装部署，不是一个真实的后端服务器，仅仅缓存了前端数据")]),_._v(" "),i("li",[i("code",[_._v("作用：")]),_._v("减轻源站的服务器压力，对于国外访问，可以更快速")]),_._v(" "),i("li",[_._v("CDN不是把我们的服务部署在全世界各地（成本太高）")]),_._v(" "),i("li",[_._v("CDN是静态资源的缓存（JS，Html、Css、图片、视频），不会变")]),_._v(" "),i("li",[_._v("网站提供是一个后端API接口")]),_._v(" "),i("li",[_._v("你从没过打开的商家的商品图片来美国的一台CDN服务器")]),_._v(" "),i("li",[_._v("但是请求的API接口，后端服务可能还是部署在中国")]),_._v(" "),i("li",[_._v("需要和数据库动态交互的，CDN没有任何作用")])]),_._v(" "),i("blockquote",[i("h4",{attrs:{id:"_2-负载层（高可用）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-负载层（高可用）"}},[_._v("#")]),_._v(" 2.负载层（高可用）")])]),_._v(" "),i("ul",[i("li",[i("p",[i("code",[_._v("nginx负责均衡：")]),_._v("https://www.cnblogs.com/xiaonq/p/10468998.html")])]),_._v(" "),i("li",[i("p",[i("code",[_._v("问题：")]),_._v("只能解决高并发，不能解决高可用")]),_._v(" "),i("p",[i("img",{staticStyle:{width:"900px","margin-left":"30px"},attrs:{src:l(338)}})]),_._v(" "),i("ul",[i("li",[i("p",[_._v("keepalive和lvs、haproxy有了解（解决高可用问题）")])]),_._v(" "),i("li",[i("p",[_._v("keepalive：https://www.cnblogs.com/xiaonq/p/11694253.html")])]),_._v(" "),i("li",[i("p",[_._v("解决了单点故障")]),_._v(" "),i("p",[i("img",{staticStyle:{width:"600px","margin-left":"50px"},attrs:{src:l(339)}})])])])])]),_._v(" "),i("h1",{attrs:{id:"_03-高并发架构各层能做的事情"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_03-高并发架构各层能做的事情"}},[_._v("#")]),_._v(" 03.高并发架构各层能做的事情")]),_._v(" "),i("ul",[i("li",[_._v("应用层\n"),i("ul",[i("li",[_._v("浏览器本地缓存：缓存静态页面、缓存加入购物车的数据")])])]),_._v(" "),i("li",[_._v("网络层\n"),i("ul",[i("li",[_._v("CDN缓存静态资源：html/css/js/图片")])])]),_._v(" "),i("li",[_._v("负载层（高并发、高可用）\n"),i("ul",[i("li",[_._v("keepalive(haproxy)+nginx反向代理（腾讯云LB、阿里云的SLB）")])])]),_._v(" "),i("li",[_._v("服务层\n"),i("ul",[i("li",[_._v("动态页面静态化（比如Django的cache服务），减少查询数据库的次数")]),_._v(" "),i("li",[_._v("借助redis缓存解决大量的mysql查询压力")]),_._v(" "),i("li",[_._v("RabbitMQ+异步解决mysql的大量写入问题")]),_._v(" "),i("li",[_._v("限流：\n"),i("ul",[i("li",[i("code",[_._v("抢购：")]),_._v("nginx设置了保护功能，当流量过大自动丢弃（负载层就丢弃了）（"),i("code",[_._v("nginx过载保护")]),_._v("）")]),_._v(" "),i("li",[_._v("同一个设备、账号、出接口ip 一秒钟最多访问次数")])])])])]),_._v(" "),i("li",[_._v("数据库层\n"),i("ul",[i("li",[_._v("解决超卖问题：乐观锁、悲观锁解决数据安全")]),_._v(" "),i("li",[_._v("mysql一主多从，读写分离：写主库，读从库（所有数据库的数据一样）\n"),i("ul",[i("li",[_._v("数据一样的，那么当数据量太大的时候查询还是很慢")])])]),_._v(" "),i("li",[_._v("分库（根据用户id分库）\n"),i("ul",[i("li",[_._v("所有数据库的表结构一样，存储的数据完全不一样")]),_._v(" "),i("li",[_._v("真实环境以用户id进行分库，每一个库的数据都很小，查询起来就快了")]),_._v(" "),i("li",[_._v("无法解决问题：当一个数据库中表中量过大的时候，查询依然会慢")])])]),_._v(" "),i("li",[_._v("分表（根据时间分表）\n"),i("ul",[i("li",[_._v("当一个表中数据过大的时候，我们必须要对表拆分")]),_._v(" "),i("li",[_._v("购物清单表中有两千万数据\n"),i("ul",[i("li",[_._v("最近半年的购物数据时 一百万")]),_._v(" "),i("li",[_._v("半年到一年的数据有五百万")]),_._v(" "),i("li",[_._v("一年以前的数据有一千万")])])])])])])])])])}),[],!1,null,null,null);v.default=t.exports},338:function(_,v,l){_.exports=l.p+"assets/img/image-20210114105729145.b02968cf.png"},339:function(_,v,l){_.exports=l.p+"assets/img/image-20210114124305020.ceeeb97d.png"},745:function(_,v,l){_.exports=l.p+"assets/img/image-20210113160241256.d15abbce.png"}}]);