(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{607:function(t,_,r){t.exports=r.p+"assets/img/image-20200308094746872.ac84b252.png"},608:function(t,_,r){t.exports=r.p+"assets/img/image-20200308095114937.5ab82c85.png"},609:function(t,_,r){t.exports=r.p+"assets/img/image-20200308095311841.3b4ef6fd.png"},610:function(t,_,r){t.exports=r.p+"assets/img/image-20200308095646117.5d44ec47.png"},975:function(t,_,r){"use strict";r.r(_);var e=r(21),s=Object(e.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("code",[t._v("更多内容见博客：")]),t._v("https://www.cnblogs.com/xiaonq/p/10241045.html")]),t._v(" "),e("h2",{attrs:{id:"_01-docker是什么？-what"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-docker是什么？-what"}},[t._v("#")]),t._v(" 01.Docker是什么？(What)")]),t._v(" "),e("h3",{attrs:{id:"_1-1-什么是docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是docker"}},[t._v("#")]),t._v(" 1.1 什么是docker")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Docker是使用最广泛的开源"),e("strong",[t._v("容器")]),t._v("引擎")])]),t._v(" "),e("li",[e("p",[t._v("一种操作系统基本的"),e("strong",[t._v("虚拟化技术")])])]),t._v(" "),e("li",[e("p",[t._v("一种简单的应用程序打包工具")])]),t._v(" "),e("li",[e("p",[t._v("依赖Linux内核特性："),e("strong",[t._v("Namespace(资源隔离)")]),t._v(" 和 "),e("strong",[t._v("Cgroup（资源限制）")])])]),t._v(" "),e("li",[e("p",[t._v("**注：**每个容器拥有一套和宿主机完全隔离的文件系统（共用linux内核），程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("容器：")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("容器是一个"),e("strong",[t._v("操作系统级别下的虚拟化技术")]),t._v("，运行一个容器就行运行一个进程一样")])]),t._v(" "),e("li",[e("p",[t._v("容器依赖linux内核特性："),e("strong",[t._v("Namespace（资源隔离）和Cgroups（资源限制）")])])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("资源隔离：")])]),t._v(" "),e("ul",[e("li",[t._v("Linux Namespaces机制提供一种资源隔离方案，"),e("strong",[t._v("每个namespace看上去就像一个单独的Linux系统")]),t._v("。")]),t._v(" "),e("li",[t._v("PID,IPC(进程通信),Network等系统资源不再是全局性的，而是属于某个特定的Namespace。")]),t._v(" "),e("li",[t._v("每个namespace下的资源对于其他namespace下的资源都是透明，不可见的。")]),t._v(" "),e("li",[t._v("系统中可以同时存在两个进程号为0,1,2的进程，由于属于不同的namespace，所以它们之间并不冲突。")]),t._v(" "),e("li",[t._v("而在用户层面上只能看到属于用户自己namespace下的资源，例如使用ps命令只能列出自己namespace下的进程。")]),t._v(" "),e("li",[t._v("这样每个namespace看上去就像一个单独的Linux系统。")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("资源限制：")])]),t._v(" "),e("ul",[e("li",[t._v("为了让容器中的进程更加可控，Docker 使用 Linux cgroups 来限制容器中的进程允许使用的系统资源。")]),t._v(" "),e("li",[t._v("可以在启动容器是指定每个容器可以使用的 网络、磁盘、CPU以及内存 等")])])])])])]),t._v(" "),e("h3",{attrs:{id:"_1-2-docker思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker思想"}},[t._v("#")]),t._v(" 1.2 docker思想")]),t._v(" "),e("ul",[e("li",[t._v("Docker的思想源于"),e("strong",[t._v("集装箱")]),t._v("，集装箱解决了什么问题呢？")]),t._v(" "),e("li",[t._v("在早期运输货物需要不同分类的船，例如运输水果的船，运输生活用品的船")]),t._v(" "),e("li",[t._v("有了集装箱后，在大船上，可以把货物分类到不同的集装箱中，水果一个集装箱，生活用品一个集装箱")]),t._v(" "),e("li",[t._v("它们之间互不影响，只要把货物封装好集装箱里，就可以把不同类的货物一起运走。")]),t._v(" "),e("li",[t._v("通过Docker logo也可以看出所以然来**，Docker就像大船，集装箱就是容器**。")]),t._v(" "),e("li",[t._v("一条鲸鱼拖着若干个集装箱的经典形象已经深入人心。")])]),t._v(" "),e("p",[e("img",{staticStyle:{width:"400px","margin-left":"50px"},attrs:{src:r(607)}})]),t._v(" "),e("h3",{attrs:{id:"_1-3-docker-与-虚拟机比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-docker-与-虚拟机比较"}},[t._v("#")]),t._v(" 1.3 docker 与 虚拟机比较")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("docker设计"),e("strong",[t._v("小巧")]),t._v("，部署迁移快速，运行高效，"),e("strong",[t._v("按照应用隔离")]),t._v("，管理人员可以看到所有容器的内容。")])]),t._v(" "),e("li",[e("p",[t._v("虚拟化技术比较"),e("strong",[t._v("臃肿")]),t._v("，需要"),e("strong",[t._v("先创建新的系统")]),t._v("，"),e("strong",[t._v("按照系统隔离")]),t._v("，管理员无法看到系统内部信息。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("举例：")])]),t._v(" "),e("ul",[e("li",[t._v("Docker就像手机中的各种APP，只需要一个系统就可以下载自己所需的应用")]),t._v(" "),e("li",[t._v("虚拟化技术相当于苹果手机安装一个庞大软件，这个软件上安装安卓系统、魅族系统等，每个系统上还要安装各类应用。")]),t._v(" "),e("li",[t._v("esxi(VMware公司的产品)")]),t._v(" "),e("li",[e("img",{staticStyle:{width:"800px","margin-left":"0px"},attrs:{src:r(608)}})]),t._v(" "),e("li",[e("img",{staticStyle:{width:"800px","margin-left":"0px"},attrs:{src:r(609)}})])])])]),t._v(" "),e("h3",{attrs:{id:"_1-4-docker架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-docker架构"}},[t._v("#")]),t._v(" 1.4 Docker架构")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Docker客户端(Client):")]),t._v("   docker 命令行工具，用户也可以通过 REST API 与服务器通信")]),t._v(" "),e("li",[e("strong",[t._v("Docker服务器(Docker daemon):")]),t._v("   服务器组件，以 Linux 后台服务的方式运行， Docker daemon 运行在 Docker host 上，负责创建、运行、监控容器，构建、存储镜像")]),t._v(" "),e("li",[e("strong",[t._v("Docker镜像(Image):")]),t._v("   可将 Docker 镜像看着只读模板，通过它可以创建 Docker 容器")]),t._v(" "),e("li",[e("strong",[t._v("镜像仓库(Registry):")]),t._v("  Registry 是存放 Docker 镜像的仓库，Registry 分私有和公有两种")]),t._v(" "),e("li",[e("strong",[t._v("Docker容器(Container):")]),t._v("   Docker 容器就是 Docker 镜像的运行实例")])]),t._v(" "),e("p",[e("img",{staticStyle:{width:"800px","margin-left":"50px"},attrs:{src:r(610)}})]),t._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@linux"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("node1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run -itd --name redis -p 192.168.56.11:6380:6379 redis")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@linux"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("node1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# redis-cli -h 192.168.56.11  -p 6380 ")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h2",{attrs:{id:"_02-docker技术应用与哪些场景-（where）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-docker技术应用与哪些场景-（where）"}},[t._v("#")]),t._v(" 02.docker技术应用与哪些场景?（Where）")]),t._v(" "),e("h3",{attrs:{id:"_2-1-场景一：节省项目环境部署时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-场景一：节省项目环境部署时间"}},[t._v("#")]),t._v(" 2.1 场景一：节省项目环境部署时间")]),t._v(" "),e("ul",[e("li",[e("p",[e("span",{staticStyle:{color:"red"}},[t._v(" 单项目打包")])]),t._v(" "),e("ul",[e("li",[t._v("每次部署项目到测试、生产等环境，都要部署一大堆依赖的软件、工具，时间久，出错概率大。")]),t._v(" "),e("li",[t._v("Docker主要理念就是环境打包部署，可在任意Docker Engine运行。")]),t._v(" "),e("li",[t._v("我们只需要将每个项目环境打包到镜像，push到镜像仓库，当有需要部署这个项目时，")]),t._v(" "),e("li",[t._v("pull镜像启动容器，这个项目就可以访问了！一次构建多次部署，一劳永逸。")])])]),t._v(" "),e("li",[e("p",[e("span",{staticStyle:{color:"red"}},[t._v(" 整套项目打包")])]),t._v(" "),e("ul",[e("li",[t._v("比如有一个产品可以整套部署到客户那里，以往都是派一名实施工程师到客户那部署。")]),t._v(" "),e("li",[t._v("如果用了Docker，我们可以前期将这套项目封装打包起来，实现一键部署，分分钟钟搞定，就不需要再派人过去了。比如官方的Docker Compose编排工具。")])])]),t._v(" "),e("li",[e("p",[e("span",{staticStyle:{color:"red"}},[t._v(" 新开源技术试用")])]),t._v(" "),e("ul",[e("li",[t._v("有时，我们想调研一些开源项目，我们可以直接从公共镜像仓库pull项目官方做好镜像启动容器即可。")])])])]),t._v(" "),e("h3",{attrs:{id:"_2-场景二：环境一致性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-场景二：环境一致性"}},[t._v("#")]),t._v(" 2.场景二：环境一致性")]),t._v(" "),e("ul",[e("li",[t._v("项目在开发电脑本地运行没问题，到了测试或生产环境就运行不起来。")]),t._v(" "),e("li",[t._v("Docker将项目环境打包成镜像，可以在任何Docker Engine部署。")])]),t._v(" "),e("h3",{attrs:{id:"_3-场景三：持续集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-场景三：持续集成"}},[t._v("#")]),t._v(" 3.场景三：持续集成")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("一个项目版本快速迭代的测试场景，需要一个合理的CI（持续集成）/CD（持续部署）环境支撑。")])]),t._v(" "),e("li",[e("p",[t._v("CI/CD是一个周期性自动化项目测试流程，包括构建、部署、测试、发布等工作，很少需要人工干预。")])]),t._v(" "),e("li",[e("p",[t._v("Docker通过项目镜像构建和快速部署，打通测试环境与生产环境，高度保持多个环境之间一致性。")])])]),t._v(" "),e("h3",{attrs:{id:"_4-场景四：微服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-场景四：微服务"}},[t._v("#")]),t._v(" 4.场景四：微服务")]),t._v(" "),e("ul",[e("li",[t._v("微服务指尽可能细粒度拆分业务程序架构，由多个独立服务组成业务系统。")]),t._v(" "),e("li",[t._v("Docker容器作为这些独立服务的部署单元，每个服务单独部署到一个docker容器中。")])]),t._v(" "),e("h2",{attrs:{id:"_03-为什么要使用docker-（why）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-为什么要使用docker-（why）"}},[t._v("#")]),t._v(" 03.为什么要使用docker?（Why）")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("高效的利用资源")])]),t._v(" "),e("li",[e("p",[t._v("单台机器得部署多个应用；")])]),t._v(" "),e("li",[e("p",[t._v("应用之间互相隔离（微服务）；")])]),t._v(" "),e("li",[e("p",[t._v("应用之间不能发生资源抢占，每个应用只能使用事先注册申请的资源。")])])])])}),[],!1,null,null,null);_.default=s.exports}}]);