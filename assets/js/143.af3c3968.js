(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1045:function(s,t,a){"use strict";a.r(t);var n=a(21),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"_01-python垃圾回收机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_01-python垃圾回收机制"}},[s._v("#")]),s._v(" 01.python垃圾回收机制")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    def "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("__del__")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("                # 作用：清除无用的实例对内存的暂用\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__del__'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\ns1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Student")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ns2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1\ndel s2\ndel s1\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" time\ntime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_1-1-引计数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-引计数"}},[s._v("#")]),s._v(" 1.1 引计数")]),s._v(" "),n("ul",[n("li",[s._v("原理\n"),n("ul",[n("li",[s._v("当一个对象的引用被创建或者复制时，对象的引用计数加1；当一个对象的引用被销毁时，对象的引用计数减1.")]),s._v(" "),n("li",[s._v("当对象的引用计数减少为0时，就意味着对象已经再没有被使用了，可以将其内存释放掉。")])])]),s._v(" "),n("li",[s._v("优点\n"),n("ul",[n("li",[s._v("引用计数有一个很大的优点，即实时性，任何内存，一旦没有指向它的引用，就会被立即回收，而其他的垃圾收集技术必须在某种特殊条件下才能进行无效内存的回收。")])])]),s._v(" "),n("li",[s._v("缺点\n"),n("ul",[n("li",[s._v("引用计数机制所带来的维护引用计数的额外操作与Python运行中所进行的内存分配和释放，引用赋值的次数是成正比的，")]),s._v(" "),n("li",[s._v("显然比其它那些垃圾收集技术所带来的额外操作只是与待回收的内存数量有关的效率要低。")]),s._v(" "),n("li",[s._v("同时，因为对象之间相互引用，每个对象的引用都不会为0，所以这些对象所占用的内存始终都不会被释放掉。")])])])]),s._v(" "),n("h3",{attrs:{id:"_1-2-标记－清除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-标记－清除"}},[s._v("#")]),s._v(" 1.2 标记－清除")]),s._v(" "),n("ul",[n("li",[s._v("它分为两个阶段：第一阶段是标记阶段，GC会把所有的活动对象打上标记，第二阶段是把那些没有标记的对象非活动对象进行回收。")]),s._v(" "),n("li",[s._v("对象之间通过引用（指针）连在一起，构成一个有向图")]),s._v(" "),n("li",[s._v("从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。")]),s._v(" "),n("li",[s._v("根对象就是全局变量、调用栈、寄存器。")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(704),alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("在上图中，可以从程序变量直接访问块1，并且可以间接访问块2和3,程序无法访问块4和5")]),s._v(" "),n("li",[s._v("第一步将标记块1，并记住块2和3以供稍后处理。")]),s._v(" "),n("li",[s._v("第二步将标记块2，第三步将标记块3，但不记得块2，因为它已被标记。")]),s._v(" "),n("li",[s._v("扫描阶段将忽略块1，2和3，因为它们已被标记，但会回收块4和5。")])]),s._v(" "),n("h3",{attrs:{id:"_1-3-分代回收"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-分代回收"}},[s._v("#")]),s._v(" 1.3 分代回收")]),s._v(" "),n("ul",[n("li",[s._v("分代回收是建立在标记清除技术基础之上的，是一种以空间换时间的操作方式。")]),s._v(" "),n("li",[s._v("Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代）")]),s._v(" "),n("li",[s._v("他们对应的是3个链表，它们的"),n("strong",[s._v("垃圾收集频率与对象的存活时间的增大而减小")]),s._v("。")]),s._v(" "),n("li",[s._v("新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发")]),s._v(" "),n("li",[s._v("把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推")]),s._v(" "),n("li",[s._v("老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。")])])])}),[],!1,null,null,null);t.default=e.exports},704:function(s,t,a){s.exports=a.p+"assets/img/image-20200311091914402.b1997cd0.png"}}]);