(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{536:function(s,a,t){s.exports=t.p+"assets/img/image-20210114165451146.0fa3f831.png"},537:function(s,a,t){s.exports=t.p+"assets/img/image-20210114170732820.7d561bee.png"},538:function(s,a,t){s.exports=t.p+"assets/img/image-20210114171143705.1bb17cf8.png"},907:function(s,a,t){"use strict";t.r(a);var e=t(21),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"_01-mysql索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-mysql索引"}},[s._v("#")]),s._v(" 01.Mysql索引")]),s._v(" "),e("h3",{attrs:{id:"_1-1-mysql索引类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mysql索引类型"}},[s._v("#")]),s._v(" 1.1 mysql索引类型")]),s._v(" "),e("ul",[e("li",[s._v("单列索引\n"),e("ul",[e("li",[e("code",[s._v("主键索引(不能为空)")]),s._v(" "),e("ul",[e("li",[s._v("设定为主键后数据库会自动建立索引")])])]),s._v(" "),e("li",[e("code",[s._v("唯一索引(可为空)")]),s._v(" "),e("ul",[e("li",[s._v("索引列的值必须唯一，但允许有空值")])])]),s._v(" "),e("li",[e("code",[s._v("普通索引(可重复)")]),s._v(" "),e("ul",[e("li",[s._v("可以为空，可以重复")])])])])]),s._v(" "),e("li",[e("code",[s._v("组合索引(一个索引包含多个列)")]),s._v(" "),e("ul",[e("li",[s._v("最左前缀")])])])]),s._v(" "),e("h3",{attrs:{id:"_1-2-组合索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-组合索引"}},[s._v("#")]),s._v(" 1.2 组合索引")]),s._v(" "),e("h4",{attrs:{id:"_1-2-1-复合索引特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-复合索引特点"}},[s._v("#")]),s._v(" 1.2.1 复合索引特点")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("联合索引其实很简单，相对于一般索引只有一个字段，联合索引可以为多个字段创建一个索引")])]),s._v(" "),e("li",[e("p",[s._v("它的原理也很简单，比如，我们在（a,b,c）字段上创建一个联合索引，则索引记录会首先按照A字段排序，然后再按照B字段排序然后再是C字段*")])]),s._v(" "),e("li",[e("p",[s._v("其实联合索引的查找就跟查字典是一样的，先根据第一个字母查，然后再根据第二个字母查")])]),s._v(" "),e("li",[e("p",[s._v("或者只根据第一个字母查，但是不能跳过第一个字母从第二个字母开始查。这就是所谓的最左前缀原理。*")])]),s._v(" "),e("li",[e("p",[s._v("联合索引的特点就是：")]),s._v(" "),e("ul",[e("li",[s._v("1）第一个字段一定是有序的")]),s._v(" "),e("li",[s._v("2）当第一个字段值相等的时候，第二个字段又是有序的，比如下表中当A=2时所有B的值是有序排列的，依次类推，当同一个B值得所有C字段是有序排列的")]),s._v(" "),e("li",[e("img",{staticStyle:{width:"300px","margin-left":"0px"},attrs:{src:t(536)}})])])])]),s._v(" "),e("h4",{attrs:{id:"_1-2-2-最左前缀原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-最左前缀原理"}},[s._v("#")]),s._v(" 1.2.2 最左前缀原理")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''最左前缀原理'''")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### 1、以下的查询方式都可以用到索引")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''\nselect * from table where a=1；\nselect * from table where a=1 and b=2；\nselect * from table where a=1 and b=2 and c=3；\n上面三个查询按照 （a ）, （a，b ）,（a，b，c ）的顺序都可以利用到索引，这就是最左前缀匹配。\n'''")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### 2、如果查询语句是：")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''\nselect * from table where a=1 and c=3； 那么只会用到索引a。\n'''")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##### 3、这样不会用的索引")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''\nselect * from table where b=2 and c=3； 因为没有用到最左前缀a，所以这个查询是用户到索引的。\n'''")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h3",{attrs:{id:"_1-3-mysql索引失效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-mysql索引失效"}},[s._v("#")]),s._v(" 1.3 mysql索引失效")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("1、like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。")]),s._v(" "),e("ul",[e("li",[e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("不能命中索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where name "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LIKE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%张%"')]),s._v("\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where name "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LIKE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%张"')]),s._v("\n   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）可以命中索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where name "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("LIKE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张%"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])])])])]),s._v(" "),e("li",[e("p",[s._v("2、or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效")]),s._v(" "),e("ul",[e("li",[e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）命中索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where uid"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" or uid"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）无法命中索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where uid"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" or name"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("zhangsan"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])])])]),s._v(" "),e("li",[e("p",[s._v("3、组合索引，不是使用第一列索引，索引失效。")]),s._v(" "),e("ul",[e("li",[e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[s._v("   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("只会用到索引a\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where a"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" and c"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("；\n   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）因为没有用到最左前缀a，所以无法使用索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where b"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" and c"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("； \n   ## "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）命中索引\n   select "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" table where a"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" and b"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" and c"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("；\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])])])])]),s._v(" "),e("h2",{attrs:{id:"_02-b-tree-b-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-b-tree-b-tree"}},[s._v("#")]),s._v(" 02.B-tree/B+tree")]),s._v(" "),e("h3",{attrs:{id:"_2-1-b-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-b-tree"}},[s._v("#")]),s._v(" 2.1 B-Tree")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。")])]),s._v(" "),e("li",[e("p",[s._v("两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。")])]),s._v(" "),e("li",[e("p",[s._v("以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。")])])]),s._v(" "),e("p",[e("img",{staticStyle:{width:"800px","margin-left":"50px"},attrs:{src:t(537)}})]),s._v(" "),e("ul",[e("li",[s._v("模拟查找关键字29的过程")])]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v("'''模拟查找关键字29的过程：'''")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 比较关键字29在区间（17,35），找到磁盘块1的指针P2。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 比较关键字29在区间（26,30），找到磁盘块3的指针P2。")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 在磁盘块8中的关键字列表中找到关键字29。")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"_2-2-b-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-b-tree"}},[s._v("#")]),s._v(" 2.2 B+tree")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("B+Tree是在B-Tree基础上的一种优化")]),s._v("，使其更适合实现外存储索引结构，"),e("code",[s._v("InnoDB存储引擎就是用B+Tree实现其索引结构")]),s._v("。")])]),s._v(" "),e("li",[e("p",[s._v("B-Tree结构图中可以看到每个节点中不仅包含数据的key值，还有data值")])]),s._v(" "),e("li",[e("p",[s._v("而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小")])]),s._v(" "),e("li",[e("p",[s._v("当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("在B+Tree中，所有根节点只存储 键和指针，只有叶子节点才存放数据")])])])]),s._v(" "),e("p",[e("img",{staticStyle:{width:"800px","margin-left":"50px"},attrs:{src:t(538)}})]),s._v(" "),e("h3",{attrs:{id:"_2-3-mysql底层索引存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-mysql底层索引存储"}},[s._v("#")]),s._v(" 2.3 MySQL底层索引存储")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("1.InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节")])]),s._v(" "),e("li",[e("p",[s._v("2.也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（这里的K取值为〖10〗^3）。")])]),s._v(" "),e("li",[e("p",[s._v("3.也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = 10亿 条记录。")])]),s._v(" "),e("li",[e("p",[s._v("说明：")]),s._v(" "),e("ul",[e("li",[s._v("实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2~4层。")]),s._v(" "),e("li",[s._v("mysql的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I/O操作。")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);